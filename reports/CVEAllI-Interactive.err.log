Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
    ~~~~~~~~~~~~~~~~~~~~~~~~^^
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
    ~~~~~~~~~^
        nb,
        ^^^
    ...<4 lines>...
        **kwargs,
        ^^^^^^^^^
    )
    ^
  File "/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^
  File "/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/asyncio/base_events.py", line 725, in run_until_complete
    return future.result()
           ~~~~~~~~~~~~~^^
  File "/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
        cell, index, execution_count=self.code_cells_executed + 1
    )
  File "/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import plotly.express as px

fig = px.area(
    Year_Graph.reset_index(),
    x='Published',
    y='Published',
    title='Number of CVEs Published Per Year',
    labels={'Published': 'Year', 'value': 'CVEs'},
    color_discrete_sequence=['#22223b']
)
fig.update_layout(
    xaxis_title='Year',
    yaxis_title='CVEs',
    template='plotly_white',
    showlegend=False,
    margin=dict(l=40, r=40, t=60, b=40)
)
fig.add_annotation(
    text='cve.icu',
    xref='paper', yref='paper',
    x=0.01, y=0.01, showarrow=False,
    font=dict(size=12, color='gray'),
    opacity=0.5
)
fig.show()
------------------


[31m---------------------------------------------------------------------------[39m
[31mValueError[39m                                Traceback (most recent call last)
[32m/tmp/ipykernel_6013/615504490.py[39m in [36m?[39m[34m()[39m
[32m      1[39m [38;5;28;01mimport[39;00m plotly.express [38;5;28;01mas[39;00m px
[32m      2[39m 
[32m      3[39m fig = px.area(
[32m----> [39m[32m4[39m     Year_Graph.reset_index(),
[32m      5[39m     x=[33m'Published'[39m,
[32m      6[39m     y=[33m'Published'[39m,
[32m      7[39m     title=[33m'Number of CVEs Published Per Year'[39m,

[32m/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/pandas/core/series.py[39m in [36m?[39m[34m(self, level, drop, name, inplace, allow_duplicates)[39m
[32m   1775[39m                 [38;5;28;01melse[39;00m:
[32m   1776[39m                     name = self.name
[32m   1777[39m 
[32m   1778[39m             df = self.to_frame(name)
[32m-> [39m[32m1779[39m             return df.reset_index(
[32m   1780[39m                 level=level, drop=drop, allow_duplicates=allow_duplicates
[32m   1781[39m             )
[32m   1782[39m         [38;5;28;01mreturn[39;00m [38;5;28;01mNone[39;00m

[32m/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/pandas/core/frame.py[39m in [36m?[39m[34m(self, level, drop, inplace, col_level, col_fill, allow_duplicates, names)[39m
[32m   6475[39m                     level_values = algorithms.take(
[32m   6476[39m                         level_values, lab, allow_fill=[38;5;28;01mTrue[39;00m, fill_value=lev._na_value
[32m   6477[39m                     )
[32m   6478[39m 
[32m-> [39m[32m6479[39m                 new_obj.insert(
[32m   6480[39m                     [32m0[39m,
[32m   6481[39m                     name,
[32m   6482[39m                     level_values,

[32m/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/pandas/core/frame.py[39m in [36m?[39m[34m(self, loc, column, value, allow_duplicates)[39m
[32m   5161[39m                 [33m"'self.flags.allows_duplicate_labels' is False."[39m
[32m   5162[39m             )
[32m   5163[39m         [38;5;28;01mif[39;00m [38;5;28;01mnot[39;00m allow_duplicates [38;5;28;01mand[39;00m column [38;5;28;01min[39;00m self.columns:
[32m   5164[39m             [38;5;66;03m# Should this be a different kind of error??[39;00m
[32m-> [39m[32m5165[39m             [38;5;28;01mraise[39;00m ValueError(f"cannot insert {column}, already exists")
[32m   5166[39m         [38;5;28;01mif[39;00m [38;5;28;01mnot[39;00m is_integer(loc):
[32m   5167[39m             [38;5;28;01mraise[39;00m TypeError([33m"loc must be int"[39m)
[32m   5168[39m         [38;5;66;03m# convert non stdlib ints to satisfy typing checks[39;00m

[31mValueError[39m: cannot insert Published, already exists

